logging >>tokens0  <head>
1  <meta>
2  <title>
3  git
4  ready
5  ignoring
6  files
7  <\title>
8  <meta>
9  <link>
10  <link>
11  <link>
12  <link>
13  <\head>
14  <body>
15  <div>
16  <div>
17  <h1>
18  <a>
19  git ready
20  <\a>
21  <\h1>
22  <\div>
23  <div>
24  <div>
25  learn
26  git
27  one
28  commit
29  at
30  a
31  time
32  <\div>
33  <div>
34  by
35  Nick
36  Quaranto
37  <\div>
38  <\div>
39  <div>
40  <div>
41  <h2>
42  <a>
43  
    ignoring files
  
44  <\a>
45  <\h2>
46  <div>
47  committed
48  19
49  Jan
50  2009
51  <\div>
52  We
53  don
54  t
55  need
56  Git
57  to
58  version
59  everything
60  in
61  our
62  projects
63  be
64  it
65  compiled
66  source
67  files
68  with
69  passwords
70  or
71  temporary
72  files
73  that
74  editors
75  love
76  to
77  create
78  Usually
79  keeping
80  stuff
81  out
82  of
83  your
84  VCS
85  hands
86  is
87  a
88  task
89  that
90  is
91  hard
92  to
93  manage
94  and
95  annoying
96  to
97  set
98  up
99  Not
100  with
101  Git
102  Using
103  the
104  <code>
105  gitignore
106  <\code>
107  file
108  along
109  with
110  some
111  other
112  options
113  we
114  re
115  going
116  to
117  learn
118  how
119  to
120  set
121  up
122  per
123  project
124  and
125  per
126  user
127  ignores
128  <\p>
129  <a>
130  <img>
131  <\a>
132  <\p>
133  The
134  easiest
135  and
136  simplest
137  way
138  is
139  to
140  create
141  a
142  <code>
143  gitignore
144  <\code>
145  file
146  in
147  your
148  project
149  s
150  root
151  directory
152  The
153  files
154  you
155  choose
156  to
157  ignore
158  here
159  take
160  affect
161  for
162  all
163  directories
164  in
165  your
166  project
167  unless
168  if
169  they
170  include
171  their
172  own
173  <code>
174  gitignore
175  <\code>
176  file
177  This
178  is
179  nice
180  since
181  you
182  have
183  one
184  place
185  to
186  configure
187  ignores
188  unlike
189  SVN
190  s
191  svn
192  ignore
193  which
194  must
195  be
196  set
197  on
198  every
199  folder
200  Also
201  the
202  file
203  itself
204  can
205  be
206  versioned
207  which
208  is
209  definitely
210  good
211  <\p>
212  Here
213  s
214  a
215  basic
216  <code>
217  gitignore
218  <\code>
219  <\p>
220  <pre>
221  cat
222  gitignore

#
223  Can
224  ignore
225  specific
226  files

227  DS
228  Store

#
229  Use
230  wildcards
231  as
232  well

233  swp

#
234  Can
235  also
236  ignore
237  all
238  directories
239  and
240  files
241  in
242  a
243  directory
244  tmp
245  <\pre>
246  Of
247  course
248  this
249  could
250  get
251  a
252  lot
253  more
254  complex
255  You
256  can
257  also
258  add
259  exceptions
260  to
261  ignore
262  rules
263  by
264  starting
265  the
266  line
267  with
268  <code>
269  <\code>
270  See
271  an
272  example
273  of
274  this
275  at
276  the
277  <a>
278  GitHub guide on ignores
279  <\a>
280  <\p>
281  Two
282  things
283  to
284  keep
285  in
286  mind
287  with
288  ignoring
289  files
290  First
291  if
292  a
293  file
294  is
295  already
296  being
297  tracked
298  by
299  Git
300  adding
301  the
302  file
303  to
304  <code>
305  gitignore
306  <\code>
307  won
308  t
309  stop
310  Git
311  from
312  tracking
313  it
314  You
315  ll
316  need
317  to
318  do
319  <code>
320  git
321  rm
322  cached
323  file
324  <\code>
325  to
326  keep
327  the
328  file
329  in
330  your
331  tree
332  and
333  then
334  ignore
335  it
336  Secondly
337  empty
338  directories
339  do
340  not
341  get
342  tracked
343  by
344  Git
345  If
346  you
347  want
348  them
349  to
350  be
351  tracked
352  they
353  need
354  to
355  have
356  something
357  in
358  them
359  Usually
360  doing
361  a
362  <code>
363  touch
364  gitignore
365  <\code>
366  is
367  enough
368  to
369  keep
370  the
371  folder
372  tracked
373  <\p>
374  You
375  can
376  also
377  open
378  up
379  <code>
380  GIT
381  DIR
382  info
383  exclude
384  <\code>
385  <code>
386  GIT
387  DIR
388  <\code>
389  is
390  usually
391  your
392  <code>
393  git
394  <\code>
395  folder
396  and
397  edit
398  that
399  file
400  for
401  project
402  only
403  ignores
404  The
405  problem
406  with
407  this
408  is
409  that
410  those
411  changes
412  aren
413  t
414  checked
415  in
416  so
417  use
418  this
419  only
420  if
421  you
422  have
423  some
424  personal
425  files
426  that
427  don
428  t
429  need
430  to
431  be
432  shared
433  with
434  others
435  on
436  the
437  same
438  project
439  <\p>
440  Your
441  final
442  option
443  with
444  ignoring
445  folders
446  is
447  adding
448  a
449  per
450  user
451  ignore
452  by
453  setting
454  up
455  a
456  <code>
457  core
458  excludesfiles
459  <\code>
460  option
461  in
462  your
463  config
464  file
465  You
466  can
467  set
468  up
469  a
470  <code>
471  gitignore
472  <\code>
473  file
474  in
475  your
476  <span>
477  HOME
478  <\span>
479  directory
480  that
481  will
482  affect
483  all
484  of
485  your
486  repositories
487  by
488  running
489  this
490  command
491  <\p>
492  <code>
493  git
494  config
495  global
496  core
497  excludesfile
498  gitignore
499  <\code>
500  <\p>
501  Read
502  up
503  on
504  the
505  <a>
506  manpage
507  <\a>
508  if
509  you
510  d
511  like
512  to
513  learn
514  more
515  about
516  how
517  ignores
518  work
519  As
520  always
521  if
522  you
523  have
524  other
525  ignore
526  related
527  tips
528  let
529  us
530  know
531  in
532  the
533  comments
534  <\p>
535  <div>
536  <div>
537  <\div>
538  <noscript>
539  <a>
540  View the discussion thread.
541  <\a>
542  <\noscript>
543  <a>
544  blog comments powered by 
545  <span>
546  Disqus
547  <\span>
548  <\a>
549  <\div>
550  <\div>
551  <\div>
552  <div>
553  <h3>
554  beginner
555  <\h3>
556  <a>
557  smartly save stashes
558  <\a>
559  <a>
560  remote tracking branches
561  <\a>
562  <a>
563  ignoring doesn't remove a file
564  <\a>
565  <a>
566  where to find the git community
567  <\a>
568  <a>
569  finding who committed what
570  <\a>
571  <a>
572  what git is not
573  <\a>
574  <a>
575  how git stores your data
576  <\a>
577  <a>
578  converting from svn
579  <\a>
580  <a>
581  tagging
582  <\a>
583  <a>
584  push and delete remote branches
585  <\a>
586  <a>
587  installing git
588  <\a>
589  <a>
590  branching and merging
591  <\a>
592  <a>
593  pushing and pulling
594  <\a>
595  <a>
596  ignoring files
597  <\a>
598  <a>
599  the staging area
600  <\a>
601  <a>
602  cleaning up untracked files
603  <\a>
604  <a>
605  reverting files
606  <\a>
607  <a>
608  stashing your changes
609  <\a>
610  <\div>
611  <div>
612  <h3>
613  intermediate
614  <\h3>
615  <a>
616  find unmerged commits
617  <\a>
618  <a>
619  find ancestor commits
620  <\a>
621  <a>
622  restoring a directory from history
623  <\a>
624  <a>
625  rolling back changes with revert
626  <\a>
627  <a>
628  pick out individual commits
629  <\a>
630  <a>
631  get a file from a specific revision
632  <\a>
633  <a>
634  temporarily ignoring files
635  <\a>
636  <a>
637  list remote branches
638  <\a>
639  <a>
640  easily fetching upstream changes
641  <\a>
642  <a>
643  reflog, your safety net
644  <\a>
645  <a>
646  helpful command aliases
647  <\a>
648  <a>
649  intro to rebase
650  <\a>
651  <a>
652  finding what has been changed
653  <\a>
654  <a>
655  exporting your repository
656  <\a>
657  <a>
658  text-based graph
659  <\a>
660  <a>
661  sharing your changes
662  <\a>
663  <a>
664  count your commits
665  <\a>
666  <a>
667  interactive adding
668  <\a>
669  <a>
670  visualizing your repo
671  <\a>
672  <a>
673  checkout tracked remote branch
674  <\a>
675  <\div>
676  <div>
677  <h3>
678  advanced
679  <\h3>
680  <a>
681  ribbon/catchup: reading new commits
682  <\a>
683  <a>
684  tig, the ncurses front-end to Git
685  <\a>
686  <a>
687  what's inside your .git directory
688  <\a>
689  <a>
690  reorder commits with rebase
691  <\a>
692  <a>
693  easily manage git remote branches
694  <\a>
695  <a>
696  keep either file in merge conflicts
697  <\a>
698  <a>
699  convert git-svn tag branches to real tags
700  <\a>
701  <a>
702  pull with rebase
703  <\a>
704  <a>
705  squashing commits with rebase
706  <\a>
707  <a>
708  bash auto completion
709  <\a>
710  <a>
711  push to only bare repositories
712  <\a>
713  <a>
714  zsh git status
715  <\a>
716  <a>
717  bash git status
718  <\a>
719  <a>
720  bend logs to your will
721  <\a>
722  <a>
723  restoring lost commits
724  <\a>
725  <a>
726  piecemeal staging
727  <\a>
728  <a>
729  fixing broken commit messages
730  <\a>
731  <\div>
732  <div>
733  <h3>
734  resources
735  <\h3>
736  <a>
737  Git Community Book
738  <\a>
739  <a>
740  GitHub Guides
741  <\a>
742  <a>
743  GitWiki
744  <\a>
745  <a>
746  GitCasts
747  <\a>
748  <a>
749  Git for everyone
750  <\a>
751  <a>
752  Git-SVN Crash Course
753  <\a>
754  <a>
755  $ cheat git
756  <\a>
757  <a>
758  Why Git is Better Than X
759  <\a>
760  <a>
761  Git for Computer Scientists
762  <\a>
763  <a>
764  Git Magic
765  <\a>
766  <a>
767  Gitology
768  <\a>
769  <a>
770  gitguru
771  <\a>
772  <a>
773  Pro Git Book
774  <\a>
775  <a>
776  Git Reference
777  <\a>
778  <a>
779  A tour of git: the basics
780  <\a>
781  <a>
782  Git from the bottom up
783  <\a>
784  <a>
785  Git Immersion
786  <\a>
787  <a>
788  Git Guys
789  <\a>
790  <\div>
791  <div>
792  <div>
793  <a>
794  about
795  <\a>
796  <a>
797  code
798  <\a>
799  <a>
800  submit a tip
801  <\a>
802  <a>
803  rss
804  <\a>
805  <a>
806  twitter
807  <\a>
808  <\div>
809  <div>
810  <span>
811  available
812  in
813  <\span>
814  <a>
815  dutch
816  <\a>
817  <a>
818  french
819  <\a>
820  <a>
821  german
822  <\a>
823  <a>
824  hebrew
825  <\a>
826  <a>
827  italian
828  <\a>
829  <a>
830  japanese
831  <\a>
832  <a>
833  korean
834  <\a>
835  <a>
836  portuguese
837  <\a>
838  <a>
839  spanish
840  <\a>
841  <a>
842  swedish
843  <\a>
844  <a>
845  russian
846  <\a>
847  <a>
848  your language?
849  <\a>
850  <\div>
851  <div>
852  <a>
853  <img>
854  <\a>
855  <\div>
856  <\div>
857  <\div>
858  <div>
859  <a>
860  <img>
861  <\a>
862  <\div>
863  <\body>
